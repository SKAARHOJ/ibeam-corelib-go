// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ibeam_core

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IbeamCoreClient is the client API for IbeamCore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IbeamCoreClient interface {
	// Returns all basic information about the Core.
	GetCoreInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CoreInfo, error)
	// Returns all information about the Device of the given DeviceID.
	// If you specify no ID, you get the DeviceInfos of all Devices.
	GetDeviceInfo(ctx context.Context, in *DeviceIDs, opts ...grpc.CallOption) (*DeviceInfos, error)
	// Returns all information about the Model of the given ModelID.
	// If you specify no ID, you get the ModelInfos of all Models.
	GetModelInfo(ctx context.Context, in *ModelIDs, opts ...grpc.CallOption) (*ModelInfos, error)
	// Returns all Parameters, with the specified DeviceParameterIDs.
	// This Parameters include the actual ParameterValue, which gives Information
	// about the availability and shows if the Parameter is assumed.
	// If you set no ParameterID, you get all Parameters for a given Device.
	Get(ctx context.Context, in *DeviceParameterIDs, opts ...grpc.CallOption) (*Parameters, error)
	// Returns all ParameterDetails of the given ModelParameterID.
	// The Details include all basic information about a Parameter,
	// that descibe also how you cann controll the Parameter.
	// If you set no ParameterID, you get all Parameters for a given Model.
	GetParameterDetails(ctx context.Context, in *ModelParameterIDs, opts ...grpc.CallOption) (*ParameterDetails, error)
	// With this funciton you can set a Value of a Parameter.
	// This function provides no Error. This will be send over the Subscribe
	// Stream.
	Set(ctx context.Context, in *Parameters, opts ...grpc.CallOption) (*Empty, error)
	// No id -> subscribe to everything
	// On subscribe all current values should be sent back!
	Subscribe(ctx context.Context, in *DeviceParameterIDs, opts ...grpc.CallOption) (IbeamCore_SubscribeClient, error)
	// Get Current Configuration
	GetCoreConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ByteData, error)
	// Get the cores configuration schema generated
	GetCoreConfigSchema(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ByteData, error)
	// Set the cores current configuration and write it to the config file
	SetCoreConfig(ctx context.Context, in *ByteData, opts ...grpc.CallOption) (*Empty, error)
	// Restart the core (only works on unix based systems)
	RestartCore(ctx context.Context, in *RestartInfo, opts ...grpc.CallOption) (*Empty, error)
	// Get Model Images
	GetModelImages(ctx context.Context, in *ModelImageRequest, opts ...grpc.CallOption) (*ModelImages, error)
}

type ibeamCoreClient struct {
	cc grpc.ClientConnInterface
}

func NewIbeamCoreClient(cc grpc.ClientConnInterface) IbeamCoreClient {
	return &ibeamCoreClient{cc}
}

func (c *ibeamCoreClient) GetCoreInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CoreInfo, error) {
	out := new(CoreInfo)
	err := c.cc.Invoke(ctx, "/ibeam_core.IbeamCore/GetCoreInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ibeamCoreClient) GetDeviceInfo(ctx context.Context, in *DeviceIDs, opts ...grpc.CallOption) (*DeviceInfos, error) {
	out := new(DeviceInfos)
	err := c.cc.Invoke(ctx, "/ibeam_core.IbeamCore/GetDeviceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ibeamCoreClient) GetModelInfo(ctx context.Context, in *ModelIDs, opts ...grpc.CallOption) (*ModelInfos, error) {
	out := new(ModelInfos)
	err := c.cc.Invoke(ctx, "/ibeam_core.IbeamCore/GetModelInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ibeamCoreClient) Get(ctx context.Context, in *DeviceParameterIDs, opts ...grpc.CallOption) (*Parameters, error) {
	out := new(Parameters)
	err := c.cc.Invoke(ctx, "/ibeam_core.IbeamCore/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ibeamCoreClient) GetParameterDetails(ctx context.Context, in *ModelParameterIDs, opts ...grpc.CallOption) (*ParameterDetails, error) {
	out := new(ParameterDetails)
	err := c.cc.Invoke(ctx, "/ibeam_core.IbeamCore/GetParameterDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ibeamCoreClient) Set(ctx context.Context, in *Parameters, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ibeam_core.IbeamCore/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ibeamCoreClient) Subscribe(ctx context.Context, in *DeviceParameterIDs, opts ...grpc.CallOption) (IbeamCore_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &IbeamCore_ServiceDesc.Streams[0], "/ibeam_core.IbeamCore/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &ibeamCoreSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IbeamCore_SubscribeClient interface {
	Recv() (*Parameter, error)
	grpc.ClientStream
}

type ibeamCoreSubscribeClient struct {
	grpc.ClientStream
}

func (x *ibeamCoreSubscribeClient) Recv() (*Parameter, error) {
	m := new(Parameter)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ibeamCoreClient) GetCoreConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ByteData, error) {
	out := new(ByteData)
	err := c.cc.Invoke(ctx, "/ibeam_core.IbeamCore/GetCoreConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ibeamCoreClient) GetCoreConfigSchema(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ByteData, error) {
	out := new(ByteData)
	err := c.cc.Invoke(ctx, "/ibeam_core.IbeamCore/GetCoreConfigSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ibeamCoreClient) SetCoreConfig(ctx context.Context, in *ByteData, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ibeam_core.IbeamCore/SetCoreConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ibeamCoreClient) RestartCore(ctx context.Context, in *RestartInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ibeam_core.IbeamCore/RestartCore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ibeamCoreClient) GetModelImages(ctx context.Context, in *ModelImageRequest, opts ...grpc.CallOption) (*ModelImages, error) {
	out := new(ModelImages)
	err := c.cc.Invoke(ctx, "/ibeam_core.IbeamCore/GetModelImages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IbeamCoreServer is the server API for IbeamCore service.
// All implementations must embed UnimplementedIbeamCoreServer
// for forward compatibility
type IbeamCoreServer interface {
	// Returns all basic information about the Core.
	GetCoreInfo(context.Context, *Empty) (*CoreInfo, error)
	// Returns all information about the Device of the given DeviceID.
	// If you specify no ID, you get the DeviceInfos of all Devices.
	GetDeviceInfo(context.Context, *DeviceIDs) (*DeviceInfos, error)
	// Returns all information about the Model of the given ModelID.
	// If you specify no ID, you get the ModelInfos of all Models.
	GetModelInfo(context.Context, *ModelIDs) (*ModelInfos, error)
	// Returns all Parameters, with the specified DeviceParameterIDs.
	// This Parameters include the actual ParameterValue, which gives Information
	// about the availability and shows if the Parameter is assumed.
	// If you set no ParameterID, you get all Parameters for a given Device.
	Get(context.Context, *DeviceParameterIDs) (*Parameters, error)
	// Returns all ParameterDetails of the given ModelParameterID.
	// The Details include all basic information about a Parameter,
	// that descibe also how you cann controll the Parameter.
	// If you set no ParameterID, you get all Parameters for a given Model.
	GetParameterDetails(context.Context, *ModelParameterIDs) (*ParameterDetails, error)
	// With this funciton you can set a Value of a Parameter.
	// This function provides no Error. This will be send over the Subscribe
	// Stream.
	Set(context.Context, *Parameters) (*Empty, error)
	// No id -> subscribe to everything
	// On subscribe all current values should be sent back!
	Subscribe(*DeviceParameterIDs, IbeamCore_SubscribeServer) error
	// Get Current Configuration
	GetCoreConfig(context.Context, *Empty) (*ByteData, error)
	// Get the cores configuration schema generated
	GetCoreConfigSchema(context.Context, *Empty) (*ByteData, error)
	// Set the cores current configuration and write it to the config file
	SetCoreConfig(context.Context, *ByteData) (*Empty, error)
	// Restart the core (only works on unix based systems)
	RestartCore(context.Context, *RestartInfo) (*Empty, error)
	// Get Model Images
	GetModelImages(context.Context, *ModelImageRequest) (*ModelImages, error)
	mustEmbedUnimplementedIbeamCoreServer()
}

// UnimplementedIbeamCoreServer must be embedded to have forward compatible implementations.
type UnimplementedIbeamCoreServer struct {
}

func (UnimplementedIbeamCoreServer) GetCoreInfo(context.Context, *Empty) (*CoreInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoreInfo not implemented")
}
func (UnimplementedIbeamCoreServer) GetDeviceInfo(context.Context, *DeviceIDs) (*DeviceInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceInfo not implemented")
}
func (UnimplementedIbeamCoreServer) GetModelInfo(context.Context, *ModelIDs) (*ModelInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelInfo not implemented")
}
func (UnimplementedIbeamCoreServer) Get(context.Context, *DeviceParameterIDs) (*Parameters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedIbeamCoreServer) GetParameterDetails(context.Context, *ModelParameterIDs) (*ParameterDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParameterDetails not implemented")
}
func (UnimplementedIbeamCoreServer) Set(context.Context, *Parameters) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedIbeamCoreServer) Subscribe(*DeviceParameterIDs, IbeamCore_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedIbeamCoreServer) GetCoreConfig(context.Context, *Empty) (*ByteData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoreConfig not implemented")
}
func (UnimplementedIbeamCoreServer) GetCoreConfigSchema(context.Context, *Empty) (*ByteData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoreConfigSchema not implemented")
}
func (UnimplementedIbeamCoreServer) SetCoreConfig(context.Context, *ByteData) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCoreConfig not implemented")
}
func (UnimplementedIbeamCoreServer) RestartCore(context.Context, *RestartInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartCore not implemented")
}
func (UnimplementedIbeamCoreServer) GetModelImages(context.Context, *ModelImageRequest) (*ModelImages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelImages not implemented")
}
func (UnimplementedIbeamCoreServer) mustEmbedUnimplementedIbeamCoreServer() {}

// UnsafeIbeamCoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IbeamCoreServer will
// result in compilation errors.
type UnsafeIbeamCoreServer interface {
	mustEmbedUnimplementedIbeamCoreServer()
}

func RegisterIbeamCoreServer(s grpc.ServiceRegistrar, srv IbeamCoreServer) {
	s.RegisterService(&IbeamCore_ServiceDesc, srv)
}

func _IbeamCore_GetCoreInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IbeamCoreServer).GetCoreInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibeam_core.IbeamCore/GetCoreInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IbeamCoreServer).GetCoreInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IbeamCore_GetDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IbeamCoreServer).GetDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibeam_core.IbeamCore/GetDeviceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IbeamCoreServer).GetDeviceInfo(ctx, req.(*DeviceIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _IbeamCore_GetModelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IbeamCoreServer).GetModelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibeam_core.IbeamCore/GetModelInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IbeamCoreServer).GetModelInfo(ctx, req.(*ModelIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _IbeamCore_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceParameterIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IbeamCoreServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibeam_core.IbeamCore/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IbeamCoreServer).Get(ctx, req.(*DeviceParameterIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _IbeamCore_GetParameterDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelParameterIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IbeamCoreServer).GetParameterDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibeam_core.IbeamCore/GetParameterDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IbeamCoreServer).GetParameterDetails(ctx, req.(*ModelParameterIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _IbeamCore_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IbeamCoreServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibeam_core.IbeamCore/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IbeamCoreServer).Set(ctx, req.(*Parameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _IbeamCore_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceParameterIDs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IbeamCoreServer).Subscribe(m, &ibeamCoreSubscribeServer{stream})
}

type IbeamCore_SubscribeServer interface {
	Send(*Parameter) error
	grpc.ServerStream
}

type ibeamCoreSubscribeServer struct {
	grpc.ServerStream
}

func (x *ibeamCoreSubscribeServer) Send(m *Parameter) error {
	return x.ServerStream.SendMsg(m)
}

func _IbeamCore_GetCoreConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IbeamCoreServer).GetCoreConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibeam_core.IbeamCore/GetCoreConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IbeamCoreServer).GetCoreConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IbeamCore_GetCoreConfigSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IbeamCoreServer).GetCoreConfigSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibeam_core.IbeamCore/GetCoreConfigSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IbeamCoreServer).GetCoreConfigSchema(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IbeamCore_SetCoreConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByteData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IbeamCoreServer).SetCoreConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibeam_core.IbeamCore/SetCoreConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IbeamCoreServer).SetCoreConfig(ctx, req.(*ByteData))
	}
	return interceptor(ctx, in, info, handler)
}

func _IbeamCore_RestartCore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IbeamCoreServer).RestartCore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibeam_core.IbeamCore/RestartCore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IbeamCoreServer).RestartCore(ctx, req.(*RestartInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _IbeamCore_GetModelImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IbeamCoreServer).GetModelImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibeam_core.IbeamCore/GetModelImages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IbeamCoreServer).GetModelImages(ctx, req.(*ModelImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IbeamCore_ServiceDesc is the grpc.ServiceDesc for IbeamCore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IbeamCore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ibeam_core.IbeamCore",
	HandlerType: (*IbeamCoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCoreInfo",
			Handler:    _IbeamCore_GetCoreInfo_Handler,
		},
		{
			MethodName: "GetDeviceInfo",
			Handler:    _IbeamCore_GetDeviceInfo_Handler,
		},
		{
			MethodName: "GetModelInfo",
			Handler:    _IbeamCore_GetModelInfo_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _IbeamCore_Get_Handler,
		},
		{
			MethodName: "GetParameterDetails",
			Handler:    _IbeamCore_GetParameterDetails_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _IbeamCore_Set_Handler,
		},
		{
			MethodName: "GetCoreConfig",
			Handler:    _IbeamCore_GetCoreConfig_Handler,
		},
		{
			MethodName: "GetCoreConfigSchema",
			Handler:    _IbeamCore_GetCoreConfigSchema_Handler,
		},
		{
			MethodName: "SetCoreConfig",
			Handler:    _IbeamCore_SetCoreConfig_Handler,
		},
		{
			MethodName: "RestartCore",
			Handler:    _IbeamCore_RestartCore_Handler,
		},
		{
			MethodName: "GetModelImages",
			Handler:    _IbeamCore_GetModelImages_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _IbeamCore_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ibeam-core.proto",
}
