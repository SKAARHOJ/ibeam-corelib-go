//
// This Protofile describes the IBeam-Core Procotol.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: ibeam-core.proto

package ibeam_core

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// The ConnectionType describes how the Core connects to the device
type ConnectionType int32

const (
	ConnectionType_Other   ConnectionType = 0
	ConnectionType_Network ConnectionType = 1
	ConnectionType_Serial  ConnectionType = 2
	ConnectionType_Sdi     ConnectionType = 3
)

// Enum value maps for ConnectionType.
var (
	ConnectionType_name = map[int32]string{
		0: "Other",
		1: "Network",
		2: "Serial",
		3: "Sdi",
	}
	ConnectionType_value = map[string]int32{
		"Other":   0,
		"Network": 1,
		"Serial":  2,
		"Sdi":     3,
	}
)

func (x ConnectionType) Enum() *ConnectionType {
	p := new(ConnectionType)
	*p = x
	return p
}

func (x ConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_ibeam_core_proto_enumTypes[0].Descriptor()
}

func (ConnectionType) Type() protoreflect.EnumType {
	return &file_ibeam_core_proto_enumTypes[0]
}

func (x ConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionType.Descriptor instead.
func (ConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_ibeam_core_proto_rawDescGZIP(), []int{0}
}

type ParameterMetaType int32

const (
	ParameterMetaType_MetaInteger  ParameterMetaType = 0
	ParameterMetaType_MetaBinary   ParameterMetaType = 1
	ParameterMetaType_MetaStr      ParameterMetaType = 2
	ParameterMetaType_MetaFloating ParameterMetaType = 3
)

// Enum value maps for ParameterMetaType.
var (
	ParameterMetaType_name = map[int32]string{
		0: "MetaInteger",
		1: "MetaBinary",
		2: "MetaStr",
		3: "MetaFloating",
	}
	ParameterMetaType_value = map[string]int32{
		"MetaInteger":  0,
		"MetaBinary":   1,
		"MetaStr":      2,
		"MetaFloating": 3,
	}
)

func (x ParameterMetaType) Enum() *ParameterMetaType {
	p := new(ParameterMetaType)
	*p = x
	return p
}

func (x ParameterMetaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParameterMetaType) Descriptor() protoreflect.EnumDescriptor {
	return file_ibeam_core_proto_enumTypes[1].Descriptor()
}

func (ParameterMetaType) Type() protoreflect.EnumType {
	return &file_ibeam_core_proto_enumTypes[1]
}

func (x ParameterMetaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParameterMetaType.Descriptor instead.
func (ParameterMetaType) EnumDescriptor() ([]byte, []int) {
	return file_ibeam_core_proto_rawDescGZIP(), []int{1}
}

type Command int32

const (
	Command_Trigger Command = 0
)

// Enum value maps for Command.
var (
	Command_name = map[int32]string{
		0: "Trigger",
	}
	Command_value = map[string]int32{
		"Trigger": 0,
	}
)

func (x Command) Enum() *Command {
	p := new(Command)
	*p = x
	return p
}

func (x Command) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Command) Descriptor() protoreflect.EnumDescriptor {
	return file_ibeam_core_proto_enumTypes[2].Descriptor()
}

func (Command) Type() protoreflect.EnumType {
	return &file_ibeam_core_proto_enumTypes[2]
}

func (x Command) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Command.Descriptor instead.
func (Command) EnumDescriptor() ([]byte, []int) {
	return file_ibeam_core_proto_rawDescGZIP(), []int{2}
}

type ValueType int32

const (
	ValueType_NoValue  ValueType = 0
	ValueType_Integer  ValueType = 1
	ValueType_Floating ValueType = 2
	ValueType_Opt      ValueType = 3
	ValueType_String   ValueType = 4
	ValueType_Binary   ValueType = 5
)

// Enum value maps for ValueType.
var (
	ValueType_name = map[int32]string{
		0: "NoValue",
		1: "Integer",
		2: "Floating",
		3: "Opt",
		4: "String",
		5: "Binary",
	}
	ValueType_value = map[string]int32{
		"NoValue":  0,
		"Integer":  1,
		"Floating": 2,
		"Opt":      3,
		"String":   4,
		"Binary":   5,
	}
)

func (x ValueType) Enum() *ValueType {
	p := new(ValueType)
	*p = x
	return p
}

func (x ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_ibeam_core_proto_enumTypes[3].Descriptor()
}

func (ValueType) Type() protoreflect.EnumType {
	return &file_ibeam_core_proto_enumTypes[3]
}

func (x ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValueType.Descriptor instead.
func (ValueType) EnumDescriptor() ([]byte, []int) {
	return file_ibeam_core_proto_rawDescGZIP(), []int{3}
}

type FeedbackStyle int32

const (
	FeedbackStyle_UndefinedFeedback FeedbackStyle = 0
	FeedbackStyle_NormalFeedback    FeedbackStyle = 1
	FeedbackStyle_DelayedFeedback   FeedbackStyle = 2
	FeedbackStyle_NoFeedback        FeedbackStyle = 3
)

// Enum value maps for FeedbackStyle.
var (
	FeedbackStyle_name = map[int32]string{
		0: "UndefinedFeedback",
		1: "NormalFeedback",
		2: "DelayedFeedback",
		3: "NoFeedback",
	}
	FeedbackStyle_value = map[string]int32{
		"UndefinedFeedback": 0,
		"NormalFeedback":    1,
		"DelayedFeedback":   2,
		"NoFeedback":        3,
	}
)

func (x FeedbackStyle) Enum() *FeedbackStyle {
	p := new(FeedbackStyle)
	*p = x
	return p
}

func (x FeedbackStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeedbackStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_ibeam_core_proto_enumTypes[4].Descriptor()
}

func (FeedbackStyle) Type() protoreflect.EnumType {
	return &file_ibeam_core_proto_enumTypes[4]
}

func (x FeedbackStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeedbackStyle.Descriptor instead.
func (FeedbackStyle) EnumDescriptor() ([]byte, []int) {
	return file_ibeam_core_proto_rawDescGZIP(), []int{4}
}

type ControlStyle int32

const (
	ControlStyle_Undefined ControlStyle = 0
	// Normal control, by setting a Value
	ControlStyle_Normal ControlStyle = 1
	// Use Increment and Decrement by sending positiv or negative Values
	ControlStyle_Incremental ControlStyle = 2
	// Accept no control, display only
	ControlStyle_NoControl ControlStyle = 3
	// Accept only Command::Trigger
	ControlStyle_Oneshot ControlStyle = 4
	// Simulate Normal by using Incremental under the hood
	ControlStyle_ControlledIncremental ControlStyle = 5
)

// Enum value maps for ControlStyle.
var (
	ControlStyle_name = map[int32]string{
		0: "Undefined",
		1: "Normal",
		2: "Incremental",
		3: "NoControl",
		4: "Oneshot",
		5: "ControlledIncremental",
	}
	ControlStyle_value = map[string]int32{
		"Undefined":             0,
		"Normal":                1,
		"Incremental":           2,
		"NoControl":             3,
		"Oneshot":               4,
		"ControlledIncremental": 5,
	}
)

func (x ControlStyle) Enum() *ControlStyle {
	p := new(ControlStyle)
	*p = x
	return p
}

func (x ControlStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ControlStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_ibeam_core_proto_enumTypes[5].Descriptor()
}

func (ControlStyle) Type() protoreflect.EnumType {
	return &file_ibeam_core_proto_enumTypes[5]
}

func (x ControlStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ControlStyle.Descriptor instead.
func (ControlStyle) EnumDescriptor() ([]byte, []int) {
	return file_ibeam_core_proto_rawDescGZIP(), []int{5}
}

// DisplayStyle can set additional rendering details for the display
type DisplayStyle int32

const (
	// Value will be displayed like it is
	DisplayStyle_DisplayDefault DisplayStyle = 0
	// Value will be displayed with one decimal place (f.e. 32.7)
	DisplayStyle_DisplayFLOAT_1DEZ DisplayStyle = 1
	// Value will be displayed with two decimal places (f.e. 32.78)
	DisplayStyle_DisplayFloat_2DEZ DisplayStyle = 2
	// Value will be displayed with three decimal places (f.e. 32.789)
	DisplayStyle_DisplayFloat_3DEZ DisplayStyle = 3
	// Value will be displayed with an appended '%' sign
	DisplayStyle_DisplayPercent DisplayStyle = 4
	// Value will be displayed with an appended 'db' sign
	DisplayStyle_DisplayDb DisplayStyle = 5
	// Value will be displayed with an appended 'f' sign
	DisplayStyle_DisplayFstop DisplayStyle = 6
	// Value will be displayed as unit fraction (f.e. 32 will be shown as 1/32)
	DisplayStyle_DisplayFraction DisplayStyle = 7
	// Value will be displayed with an appended 'K' sign
	DisplayStyle_DisplayKelvin DisplayStyle = 8
)

// Enum value maps for DisplayStyle.
var (
	DisplayStyle_name = map[int32]string{
		0: "DisplayDefault",
		1: "DisplayFLOAT_1DEZ",
		2: "DisplayFloat_2DEZ",
		3: "DisplayFloat_3DEZ",
		4: "DisplayPercent",
		5: "DisplayDb",
		6: "DisplayFstop",
		7: "DisplayFraction",
		8: "DisplayKelvin",
	}
	DisplayStyle_value = map[string]int32{
		"DisplayDefault":    0,
		"DisplayFLOAT_1DEZ": 1,
		"DisplayFloat_2DEZ": 2,
		"DisplayFloat_3DEZ": 3,
		"DisplayPercent":    4,
		"DisplayDb":         5,
		"DisplayFstop":      6,
		"DisplayFraction":   7,
		"DisplayKelvin":     8,
	}
)

func (x DisplayStyle) Enum() *DisplayStyle {
	p := new(DisplayStyle)
	*p = x
	return p
}

func (x DisplayStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DisplayStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_ibeam_core_proto_enumTypes[6].Descriptor()
}

func (DisplayStyle) Type() protoreflect.EnumType {
	return &file_ibeam_core_proto_enumTypes[6]
}

func (x DisplayStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DisplayStyle.Descriptor instead.
func (DisplayStyle) EnumDescriptor() ([]byte, []int) {
	return file_ibeam_core_proto_rawDescGZIP(), []int{6}
}

// Some generic types for common parameter
type GenericType int32

const (
	GenericType_Generic         GenericType = 0
	GenericType_ConnectionState GenericType = 1
	GenericType_DeviceIP        GenericType = 2
	GenericType_Pan             GenericType = 3
	GenericType_Tilt            GenericType = 4
	GenericType_Tally           GenericType = 5
	GenericType_Record          GenericType = 6
	GenericType_Iris            GenericType = 7
)

// Enum value maps for GenericType.
var (
	GenericType_name = map[int32]string{
		0: "Generic",
		1: "ConnectionState",
		2: "DeviceIP",
		3: "Pan",
		4: "Tilt",
		5: "Tally",
		6: "Record",
		7: "Iris",
	}
	GenericType_value = map[string]int32{
		"Generic":         0,
		"ConnectionState": 1,
		"DeviceIP":        2,
		"Pan":             3,
		"Tilt":            4,
		"Tally":           5,
		"Record":          6,
		"Iris":            7,
	}
)

func (x GenericType) Enum() *GenericType {
	p := new(GenericType)
	*p = x
	return p
}

func (x GenericType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GenericType) Descriptor() protoreflect.EnumDescriptor {
	return file_ibeam_core_proto_enumTypes[7].Descriptor()
}

func (GenericType) Type() protoreflect.EnumType {
	return &file_ibeam_core_proto_enumTypes[7]
}

func (x GenericType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GenericType.Descriptor instead.
func (GenericType) EnumDescriptor() ([]byte, []int) {
	return file_ibeam_core_proto_rawDescGZIP(), []int{7}
}

// Errortypes when setting a Parameter
type ParameterError int32

const (
	ParameterError_NoError           ParameterError = 0
	ParameterError_UnknownError      ParameterError = 1
	ParameterError_UnknownID         ParameterError = 2
	ParameterError_MinViolation      ParameterError = 3
	ParameterError_MaxViolation      ParameterError = 4
	ParameterError_InvalidType       ParameterError = 5
	ParameterError_MaxRetrys         ParameterError = 6
	ParameterError_StepSizeViolation ParameterError = 7
	ParameterError_HasNoValue        ParameterError = 8 // Will be returned if Value for Parameter with NoValue was set
)

// Enum value maps for ParameterError.
var (
	ParameterError_name = map[int32]string{
		0: "NoError",
		1: "UnknownError",
		2: "UnknownID",
		3: "MinViolation",
		4: "MaxViolation",
		5: "InvalidType",
		6: "MaxRetrys",
		7: "StepSizeViolation",
		8: "HasNoValue",
	}
	ParameterError_value = map[string]int32{
		"NoError":           0,
		"UnknownError":      1,
		"UnknownID":         2,
		"MinViolation":      3,
		"MaxViolation":      4,
		"InvalidType":       5,
		"MaxRetrys":         6,
		"StepSizeViolation": 7,
		"HasNoValue":        8,
	}
)

func (x ParameterError) Enum() *ParameterError {
	p := new(ParameterError)
	*p = x
	return p
}

func (x ParameterError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParameterError) Descriptor() protoreflect.EnumDescriptor {
	return file_ibeam_core_proto_enumTypes[8].Descriptor()
}

func (ParameterError) Type() protoreflect.EnumType {
	return &file_ibeam_core_proto_enumTypes[8]
}

func (x ParameterError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParameterError.Descriptor instead.
func (ParameterError) EnumDescriptor() ([]byte, []int) {
	return file_ibeam_core_proto_rawDescGZIP(), []int{8}
}

// The Empty message type for services that need or return no data
type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_core_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_core_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_ibeam_core_proto_rawDescGZIP(), []int{0}
}

// The CoreInfo inclued tha basic Information about the IBeamCore
type CoreInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of the IBeam Protocol
	IbeamVersion string `protobuf:"bytes,1,opt,name=ibeamVersion,proto3" json:"ibeamVersion,omitempty"`
	// Version of the IBeam Core
	CoreVersion string `protobuf:"bytes,2,opt,name=coreVersion,proto3" json:"coreVersion,omitempty"`
	// @exclude In unisketch this should be a hard break that requires updating!
	// Flied for describing the Core
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Name of the Core
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Number of Devices, that can be handled by the core
	MaxDevices uint32 `protobuf:"varint,5,opt,name=maxDevices,proto3" json:"maxDevices,omitempty"`
	// Number of currently connected clients on the Core
	ConnectedClients uint32 `protobuf:"varint,6,opt,name=connectedClients,proto3" json:"connectedClients,omitempty"`
	// Type of connection. See ConnectionType enum
	ConnectionType ConnectionType `protobuf:"varint,7,opt,name=connectionType,proto3,enum=ibeam_core.ConnectionType" json:"connectionType,omitempty"`
}

func (x *CoreInfo) Reset() {
	*x = CoreInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_core_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoreInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoreInfo) ProtoMessage() {}

func (x *CoreInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_core_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoreInfo.ProtoReflect.Descriptor instead.
func (*CoreInfo) Descriptor() ([]byte, []int) {
	return file_ibeam_core_proto_rawDescGZIP(), []int{1}
}

func (x *CoreInfo) GetIbeamVersion() string {
	if x != nil {
		return x.IbeamVersion
	}
	return ""
}

func (x *CoreInfo) GetCoreVersion() string {
	if x != nil {
		return x.CoreVersion
	}
	return ""
}

func (x *CoreInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CoreInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CoreInfo) GetMaxDevices() uint32 {
	if x != nil {
		return x.MaxDevices
	}
	return 0
}

func (x *CoreInfo) GetConnectedClients() uint32 {
	if x != nil {
		return x.ConnectedClients
	}
	return 0
}

func (x *CoreInfo) GetConnectionType() ConnectionType {
	if x != nil {
		return x.ConnectionType
	}
	return ConnectionType_Other
}

type DeviceIDs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []uint32 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeviceIDs) Reset() {
	*x = DeviceIDs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_core_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceIDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceIDs) ProtoMessage() {}

func (x *DeviceIDs) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_core_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceIDs.ProtoReflect.Descriptor instead.
func (*DeviceIDs) Descriptor() ([]byte, []int) {
	return file_ibeam_core_proto_rawDescGZIP(), []int{2}
}

func (x *DeviceIDs) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// Deviceinfo is kept simple, connection status and device config is handeled
// via parameters
type DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceID uint32 `protobuf:"varint,1,opt,name=deviceID,proto3" json:"deviceID,omitempty"`
	ModelID  uint32 `protobuf:"varint,2,opt,name=modelID,proto3" json:"modelID,omitempty"`
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_core_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_core_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_ibeam_core_proto_rawDescGZIP(), []int{3}
}

func (x *DeviceInfo) GetDeviceID() uint32 {
	if x != nil {
		return x.DeviceID
	}
	return 0
}

func (x *DeviceInfo) GetModelID() uint32 {
	if x != nil {
		return x.ModelID
	}
	return 0
}

type DeviceInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceInfos []*DeviceInfo `protobuf:"bytes,1,rep,name=deviceInfos,proto3" json:"deviceInfos,omitempty"`
}

func (x *DeviceInfos) Reset() {
	*x = DeviceInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_core_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfos) ProtoMessage() {}

func (x *DeviceInfos) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_core_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfos.ProtoReflect.Descriptor instead.
func (*DeviceInfos) Descriptor() ([]byte, []int) {
	return file_ibeam_core_proto_rawDescGZIP(), []int{4}
}

func (x *DeviceInfos) GetDeviceInfos() []*DeviceInfo {
	if x != nil {
		return x.DeviceInfos
	}
	return nil
}

type ModelIDs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []uint32 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *ModelIDs) Reset() {
	*x = ModelIDs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_core_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelIDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelIDs) ProtoMessage() {}

func (x *ModelIDs) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_core_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelIDs.ProtoReflect.Descriptor instead.
func (*ModelIDs) Descriptor() ([]byte, []int) {
	return file_ibeam_core_proto_rawDescGZIP(), []int{5}
}

func (x *ModelIDs) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// ModelInfo describes a model of the IBeamCore. It is used to describe
// different sets of Parameter fon different models
type ModelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the model
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the model
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the model
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *ModelInfo) Reset() {
	*x = ModelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_core_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelInfo) ProtoMessage() {}

func (x *ModelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_core_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelInfo.ProtoReflect.Descriptor instead.
func (*ModelInfo) Descriptor() ([]byte, []int) {
	return file_ibeam_core_proto_rawDescGZIP(), []int{6}
}

func (x *ModelInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ModelInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModelInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type ModelInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelInfos []*ModelInfo `protobuf:"bytes,1,rep,name=modelInfos,proto3" json:"modelInfos,omitempty"`
}

func (x *ModelInfos) Reset() {
	*x = ModelInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_core_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelInfos) ProtoMessage() {}

func (x *ModelInfos) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_core_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelInfos.ProtoReflect.Descriptor instead.
func (*ModelInfos) Descriptor() ([]byte, []int) {
	return file_ibeam_core_proto_rawDescGZIP(), []int{7}
}

func (x *ModelInfos) GetModelInfos() []*ModelInfo {
	if x != nil {
		return x.ModelInfos
	}
	return nil
}

type DeviceParameterID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parameter uint32 `protobuf:"varint,1,opt,name=parameter,proto3" json:"parameter,omitempty"`
	Device    uint32 `protobuf:"varint,2,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *DeviceParameterID) Reset() {
	*x = DeviceParameterID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_core_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceParameterID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceParameterID) ProtoMessage() {}

func (x *DeviceParameterID) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_core_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceParameterID.ProtoReflect.Descriptor instead.
func (*DeviceParameterID) Descriptor() ([]byte, []int) {
	return file_ibeam_core_proto_rawDescGZIP(), []int{8}
}

func (x *DeviceParameterID) GetParameter() uint32 {
	if x != nil {
		return x.Parameter
	}
	return 0
}

func (x *DeviceParameterID) GetDevice() uint32 {
	if x != nil {
		return x.Device
	}
	return 0
}

type DeviceParameterIDs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []*DeviceParameterID `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeviceParameterIDs) Reset() {
	*x = DeviceParameterIDs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_core_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceParameterIDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceParameterIDs) ProtoMessage() {}

func (x *DeviceParameterIDs) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_core_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceParameterIDs.ProtoReflect.Descriptor instead.
func (*DeviceParameterIDs) Descriptor() ([]byte, []int) {
	return file_ibeam_core_proto_rawDescGZIP(), []int{9}
}

func (x *DeviceParameterIDs) GetIds() []*DeviceParameterID {
	if x != nil {
		return x.Ids
	}
	return nil
}

type Parameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *DeviceParameterID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Error ParameterError     `protobuf:"varint,2,opt,name=error,proto3,enum=ibeam_core.ParameterError" json:"error,omitempty"`
	Value []*ParameterValue  `protobuf:"bytes,3,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *Parameter) Reset() {
	*x = Parameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_core_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Parameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parameter) ProtoMessage() {}

func (x *Parameter) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_core_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parameter.ProtoReflect.Descriptor instead.
func (*Parameter) Descriptor() ([]byte, []int) {
	return file_ibeam_core_proto_rawDescGZIP(), []int{10}
}

func (x *Parameter) GetId() *DeviceParameterID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Parameter) GetError() ParameterError {
	if x != nil {
		return x.Error
	}
	return ParameterError_NoError
}

func (x *Parameter) GetValue() []*ParameterValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parameters []*Parameter `protobuf:"bytes,1,rep,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *Parameters) Reset() {
	*x = Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_core_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parameters) ProtoMessage() {}

func (x *Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_core_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parameters.ProtoReflect.Descriptor instead.
func (*Parameters) Descriptor() ([]byte, []int) {
	return file_ibeam_core_proto_rawDescGZIP(), []int{11}
}

func (x *Parameters) GetParameters() []*Parameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type ParameterValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DimensionID []uint32 `protobuf:"varint,1,rep,packed,name=dimensionID,proto3" json:"dimensionID,omitempty"`
	// Shows if the Parameter is currently available.
	// This field is ignored in set request
	Available bool `protobuf:"varint,2,opt,name=available,proto3" json:"available,omitempty"`
	// Shows if the Parameter is currently assumed.
	// This field is ignored in set request.
	IsAssumedState bool `protobuf:"varint,3,opt,name=isAssumedState,proto3" json:"isAssumedState,omitempty"`
	// This boolean should be set by the server if the value is eitehr not yet known, or known to be garbage from the implementation.
	// It should signal to the client to replace the value with a placeholder
	Invalid bool `protobuf:"varint,21,opt,name=invalid,proto3" json:"invalid,omitempty"`
	// The Value for the Parameter.
	//
	// Types that are assignable to Value:
	//	*ParameterValue_Integer
	//	*ParameterValue_IncDecSteps
	//	*ParameterValue_Floating
	//	*ParameterValue_Str
	//	*ParameterValue_CurrentOption
	//	*ParameterValue_Cmd
	//	*ParameterValue_Binary
	//	*ParameterValue_OptionList
	Value      isParameterValue_Value         `protobuf_oneof:"value"`
	MetaValues map[string]*ParameterMetaValue `protobuf:"bytes,20,rep,name=metaValues,proto3" json:"metaValues,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ParameterValue) Reset() {
	*x = ParameterValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_core_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterValue) ProtoMessage() {}

func (x *ParameterValue) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_core_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterValue.ProtoReflect.Descriptor instead.
func (*ParameterValue) Descriptor() ([]byte, []int) {
	return file_ibeam_core_proto_rawDescGZIP(), []int{12}
}

func (x *ParameterValue) GetDimensionID() []uint32 {
	if x != nil {
		return x.DimensionID
	}
	return nil
}

func (x *ParameterValue) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *ParameterValue) GetIsAssumedState() bool {
	if x != nil {
		return x.IsAssumedState
	}
	return false
}

func (x *ParameterValue) GetInvalid() bool {
	if x != nil {
		return x.Invalid
	}
	return false
}

func (m *ParameterValue) GetValue() isParameterValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ParameterValue) GetInteger() int32 {
	if x, ok := x.GetValue().(*ParameterValue_Integer); ok {
		return x.Integer
	}
	return 0
}

func (x *ParameterValue) GetIncDecSteps() int32 {
	if x, ok := x.GetValue().(*ParameterValue_IncDecSteps); ok {
		return x.IncDecSteps
	}
	return 0
}

func (x *ParameterValue) GetFloating() float32 {
	if x, ok := x.GetValue().(*ParameterValue_Floating); ok {
		return x.Floating
	}
	return 0
}

func (x *ParameterValue) GetStr() string {
	if x, ok := x.GetValue().(*ParameterValue_Str); ok {
		return x.Str
	}
	return ""
}

func (x *ParameterValue) GetCurrentOption() uint32 {
	if x, ok := x.GetValue().(*ParameterValue_CurrentOption); ok {
		return x.CurrentOption
	}
	return 0
}

func (x *ParameterValue) GetCmd() Command {
	if x, ok := x.GetValue().(*ParameterValue_Cmd); ok {
		return x.Cmd
	}
	return Command_Trigger
}

func (x *ParameterValue) GetBinary() bool {
	if x, ok := x.GetValue().(*ParameterValue_Binary); ok {
		return x.Binary
	}
	return false
}

func (x *ParameterValue) GetOptionList() *OptionList {
	if x, ok := x.GetValue().(*ParameterValue_OptionList); ok {
		return x.OptionList
	}
	return nil
}

func (x *ParameterValue) GetMetaValues() map[string]*ParameterMetaValue {
	if x != nil {
		return x.MetaValues
	}
	return nil
}

type isParameterValue_Value interface {
	isParameterValue_Value()
}

type ParameterValue_Integer struct {
	Integer int32 `protobuf:"varint,4,opt,name=integer,proto3,oneof"`
}

type ParameterValue_IncDecSteps struct {
	IncDecSteps int32 `protobuf:"varint,5,opt,name=incDecSteps,proto3,oneof"` // Could change concept here...
}

type ParameterValue_Floating struct {
	Floating float32 `protobuf:"fixed32,6,opt,name=floating,proto3,oneof"`
}

type ParameterValue_Str struct {
	Str string `protobuf:"bytes,7,opt,name=str,proto3,oneof"`
}

type ParameterValue_CurrentOption struct {
	CurrentOption uint32 `protobuf:"varint,8,opt,name=currentOption,proto3,oneof"`
}

type ParameterValue_Cmd struct {
	Cmd Command `protobuf:"varint,9,opt,name=cmd,proto3,enum=ibeam_core.Command,oneof"`
}

type ParameterValue_Binary struct {
	Binary bool `protobuf:"varint,10,opt,name=binary,proto3,oneof"`
}

type ParameterValue_OptionList struct {
	OptionList *OptionList `protobuf:"bytes,11,opt,name=optionList,proto3,oneof"`
}

func (*ParameterValue_Integer) isParameterValue_Value() {}

func (*ParameterValue_IncDecSteps) isParameterValue_Value() {}

func (*ParameterValue_Floating) isParameterValue_Value() {}

func (*ParameterValue_Str) isParameterValue_Value() {}

func (*ParameterValue_CurrentOption) isParameterValue_Value() {}

func (*ParameterValue_Cmd) isParameterValue_Value() {}

func (*ParameterValue_Binary) isParameterValue_Value() {}

func (*ParameterValue_OptionList) isParameterValue_Value() {}

type OptionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options []*ParameterOption `protobuf:"bytes,1,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *OptionList) Reset() {
	*x = OptionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_core_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionList) ProtoMessage() {}

func (x *OptionList) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_core_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionList.ProtoReflect.Descriptor instead.
func (*OptionList) Descriptor() ([]byte, []int) {
	return file_ibeam_core_proto_rawDescGZIP(), []int{13}
}

func (x *OptionList) GetOptions() []*ParameterOption {
	if x != nil {
		return x.Options
	}
	return nil
}

type ModelParameterID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parameter uint32 `protobuf:"varint,1,opt,name=parameter,proto3" json:"parameter,omitempty"`
	Model     uint32 `protobuf:"varint,2,opt,name=model,proto3" json:"model,omitempty"` // if unspecified get default model with id 1!
}

func (x *ModelParameterID) Reset() {
	*x = ModelParameterID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_core_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelParameterID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelParameterID) ProtoMessage() {}

func (x *ModelParameterID) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_core_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelParameterID.ProtoReflect.Descriptor instead.
func (*ModelParameterID) Descriptor() ([]byte, []int) {
	return file_ibeam_core_proto_rawDescGZIP(), []int{14}
}

func (x *ModelParameterID) GetParameter() uint32 {
	if x != nil {
		return x.Parameter
	}
	return 0
}

func (x *ModelParameterID) GetModel() uint32 {
	if x != nil {
		return x.Model
	}
	return 0
}

type ModelParameterIDs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []*ModelParameterID `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *ModelParameterIDs) Reset() {
	*x = ModelParameterIDs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_core_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelParameterIDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelParameterIDs) ProtoMessage() {}

func (x *ModelParameterIDs) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_core_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelParameterIDs.ProtoReflect.Descriptor instead.
func (*ModelParameterIDs) Descriptor() ([]byte, []int) {
	return file_ibeam_core_proto_rawDescGZIP(), []int{15}
}

func (x *ModelParameterIDs) GetIds() []*ModelParameterID {
	if x != nil {
		return x.Ids
	}
	return nil
}

type ParameterDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Parameter IDs should be unique (per model) and will break compatibility if changed between versions
	Id *ModelParameterID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Codesave name of the parameter
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Path describes a grouping of the parameter to the client. Groups need to be seperated by a / and can contain spaces
	// This should also end with a / and not contain the parameter name or label again
	Path string `protobuf:"bytes,24,opt,name=path,proto3" json:"path,omitempty"`
	// give parameters multiple dimensions values, eg for channels of a frame syncroniser or MEs / Keys in a switcher
	Dimensions []*DimensionDetail `protobuf:"bytes,3,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	// The parameter label for the client
	Label       string      `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
	ShortLabel  string      `protobuf:"bytes,5,opt,name=shortLabel,proto3" json:"shortLabel,omitempty"`
	Description string      `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	GenericType GenericType `protobuf:"varint,7,opt,name=genericType,proto3,enum=ibeam_core.GenericType" json:"genericType,omitempty"`
	// Specifys if this parameter can be controled via a
	// centering analog control like a joystick
	IsSpeedValue  bool          `protobuf:"varint,8,opt,name=isSpeedValue,proto3" json:"isSpeedValue,omitempty"`
	ControlStyle  ControlStyle  `protobuf:"varint,9,opt,name=controlStyle,proto3,enum=ibeam_core.ControlStyle" json:"controlStyle,omitempty"`
	FeedbackStyle FeedbackStyle `protobuf:"varint,10,opt,name=feedbackStyle,proto3,enum=ibeam_core.FeedbackStyle" json:"feedbackStyle,omitempty"`
	// minimum delay between sent commands (manageed)
	ControlDelayMs uint32 `protobuf:"varint,11,opt,name=controlDelayMs,proto3" json:"controlDelayMs,omitempty"`
	// time to wait after a set before sending new
	// values to the client subscribe stream
	QuarantineDelayMs uint32 `protobuf:"varint,12,opt,name=quarantineDelayMs,proto3" json:"quarantineDelayMs,omitempty"`
	// how often to retry a set if target != current
	// optional config value for Normal and ControlledIncremental
	RetryCount   uint32       `protobuf:"varint,13,opt,name=retryCount,proto3" json:"retryCount,omitempty"`
	ValueType    ValueType    `protobuf:"varint,14,opt,name=valueType,proto3,enum=ibeam_core.ValueType" json:"valueType,omitempty"`
	DisplayStyle DisplayStyle `protobuf:"varint,15,opt,name=displayStyle,proto3,enum=ibeam_core.DisplayStyle" json:"displayStyle,omitempty"`
	// Maximum Value for Integers and Floats
	Minimum float32 `protobuf:"fixed32,16,opt,name=minimum,proto3" json:"minimum,omitempty"`
	// Minimum Value for Integers and Floats
	Maximum    float32     `protobuf:"fixed32,17,opt,name=maximum,proto3" json:"maximum,omitempty"`
	OptionList *OptionList `protobuf:"bytes,18,opt,name=optionList,proto3" json:"optionList,omitempty"`
	// this is set to true when the optionlist can update during runtime
	OptionListIsDynamic bool                         `protobuf:"varint,19,opt,name=optionListIsDynamic,proto3" json:"optionListIsDynamic,omitempty"`
	DefaultValue        *ParameterValue              `protobuf:"bytes,20,opt,name=defaultValue,proto3" json:"defaultValue,omitempty"`
	MetaDescription     map[string]ParameterMetaType `protobuf:"bytes,21,rep,name=metaDescription,proto3" json:"metaDescription,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=ibeam_core.ParameterMetaType"`
	// Maximum Value for Incrementation
	IncDecStepsUpperLimit int32 `protobuf:"varint,22,opt,name=incDecStepsUpperLimit,proto3" json:"incDecStepsUpperLimit,omitempty"`
	// Maximum Negative Value for Decrementation
	IncDecStepsLowerLimit int32 `protobuf:"varint,23,opt,name=incDecStepsLowerLimit,proto3" json:"incDecStepsLowerLimit,omitempty"`
	// Specifies if a parameter can still be controlled while connection state is
	// false, only comes into affect if connectionstate exists in the devicecore
	ControlableWhileDisconnected bool `protobuf:"varint,25,opt,name=controlableWhileDisconnected,proto3" json:"controlableWhileDisconnected,omitempty"`
}

func (x *ParameterDetail) Reset() {
	*x = ParameterDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_core_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterDetail) ProtoMessage() {}

func (x *ParameterDetail) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_core_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterDetail.ProtoReflect.Descriptor instead.
func (*ParameterDetail) Descriptor() ([]byte, []int) {
	return file_ibeam_core_proto_rawDescGZIP(), []int{16}
}

func (x *ParameterDetail) GetId() *ModelParameterID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ParameterDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ParameterDetail) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ParameterDetail) GetDimensions() []*DimensionDetail {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *ParameterDetail) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ParameterDetail) GetShortLabel() string {
	if x != nil {
		return x.ShortLabel
	}
	return ""
}

func (x *ParameterDetail) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ParameterDetail) GetGenericType() GenericType {
	if x != nil {
		return x.GenericType
	}
	return GenericType_Generic
}

func (x *ParameterDetail) GetIsSpeedValue() bool {
	if x != nil {
		return x.IsSpeedValue
	}
	return false
}

func (x *ParameterDetail) GetControlStyle() ControlStyle {
	if x != nil {
		return x.ControlStyle
	}
	return ControlStyle_Undefined
}

func (x *ParameterDetail) GetFeedbackStyle() FeedbackStyle {
	if x != nil {
		return x.FeedbackStyle
	}
	return FeedbackStyle_UndefinedFeedback
}

func (x *ParameterDetail) GetControlDelayMs() uint32 {
	if x != nil {
		return x.ControlDelayMs
	}
	return 0
}

func (x *ParameterDetail) GetQuarantineDelayMs() uint32 {
	if x != nil {
		return x.QuarantineDelayMs
	}
	return 0
}

func (x *ParameterDetail) GetRetryCount() uint32 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

func (x *ParameterDetail) GetValueType() ValueType {
	if x != nil {
		return x.ValueType
	}
	return ValueType_NoValue
}

func (x *ParameterDetail) GetDisplayStyle() DisplayStyle {
	if x != nil {
		return x.DisplayStyle
	}
	return DisplayStyle_DisplayDefault
}

func (x *ParameterDetail) GetMinimum() float32 {
	if x != nil {
		return x.Minimum
	}
	return 0
}

func (x *ParameterDetail) GetMaximum() float32 {
	if x != nil {
		return x.Maximum
	}
	return 0
}

func (x *ParameterDetail) GetOptionList() *OptionList {
	if x != nil {
		return x.OptionList
	}
	return nil
}

func (x *ParameterDetail) GetOptionListIsDynamic() bool {
	if x != nil {
		return x.OptionListIsDynamic
	}
	return false
}

func (x *ParameterDetail) GetDefaultValue() *ParameterValue {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

func (x *ParameterDetail) GetMetaDescription() map[string]ParameterMetaType {
	if x != nil {
		return x.MetaDescription
	}
	return nil
}

func (x *ParameterDetail) GetIncDecStepsUpperLimit() int32 {
	if x != nil {
		return x.IncDecStepsUpperLimit
	}
	return 0
}

func (x *ParameterDetail) GetIncDecStepsLowerLimit() int32 {
	if x != nil {
		return x.IncDecStepsLowerLimit
	}
	return 0
}

func (x *ParameterDetail) GetControlableWhileDisconnected() bool {
	if x != nil {
		return x.ControlableWhileDisconnected
	}
	return false
}

type ParameterDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details []*ParameterDetail `protobuf:"bytes,1,rep,name=details,proto3" json:"details,omitempty"`
}

func (x *ParameterDetails) Reset() {
	*x = ParameterDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_core_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterDetails) ProtoMessage() {}

func (x *ParameterDetails) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_core_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterDetails.ProtoReflect.Descriptor instead.
func (*ParameterDetails) Descriptor() ([]byte, []int) {
	return file_ibeam_core_proto_rawDescGZIP(), []int{17}
}

func (x *ParameterDetails) GetDetails() []*ParameterDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

type DimensionDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Count       uint32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *DimensionDetail) Reset() {
	*x = DimensionDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_core_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DimensionDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DimensionDetail) ProtoMessage() {}

func (x *DimensionDetail) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_core_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DimensionDetail.ProtoReflect.Descriptor instead.
func (*DimensionDetail) Descriptor() ([]byte, []int) {
	return file_ibeam_core_proto_rawDescGZIP(), []int{18}
}

func (x *DimensionDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DimensionDetail) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DimensionDetail) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type ParameterMetaValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*ParameterMetaValue_Integer
	//	*ParameterMetaValue_Binary
	//	*ParameterMetaValue_Str
	//	*ParameterMetaValue_Floating
	Value isParameterMetaValue_Value `protobuf_oneof:"value"`
}

func (x *ParameterMetaValue) Reset() {
	*x = ParameterMetaValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_core_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterMetaValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterMetaValue) ProtoMessage() {}

func (x *ParameterMetaValue) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_core_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterMetaValue.ProtoReflect.Descriptor instead.
func (*ParameterMetaValue) Descriptor() ([]byte, []int) {
	return file_ibeam_core_proto_rawDescGZIP(), []int{19}
}

func (m *ParameterMetaValue) GetValue() isParameterMetaValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ParameterMetaValue) GetInteger() int32 {
	if x, ok := x.GetValue().(*ParameterMetaValue_Integer); ok {
		return x.Integer
	}
	return 0
}

func (x *ParameterMetaValue) GetBinary() bool {
	if x, ok := x.GetValue().(*ParameterMetaValue_Binary); ok {
		return x.Binary
	}
	return false
}

func (x *ParameterMetaValue) GetStr() string {
	if x, ok := x.GetValue().(*ParameterMetaValue_Str); ok {
		return x.Str
	}
	return ""
}

func (x *ParameterMetaValue) GetFloating() float32 {
	if x, ok := x.GetValue().(*ParameterMetaValue_Floating); ok {
		return x.Floating
	}
	return 0
}

type isParameterMetaValue_Value interface {
	isParameterMetaValue_Value()
}

type ParameterMetaValue_Integer struct {
	Integer int32 `protobuf:"varint,1,opt,name=integer,proto3,oneof"`
}

type ParameterMetaValue_Binary struct {
	Binary bool `protobuf:"varint,2,opt,name=binary,proto3,oneof"`
}

type ParameterMetaValue_Str struct {
	Str string `protobuf:"bytes,3,opt,name=str,proto3,oneof"`
}

type ParameterMetaValue_Floating struct {
	Floating float32 `protobuf:"fixed32,4,opt,name=floating,proto3,oneof"`
}

func (*ParameterMetaValue_Integer) isParameterMetaValue_Value() {}

func (*ParameterMetaValue_Binary) isParameterMetaValue_Value() {}

func (*ParameterMetaValue_Str) isParameterMetaValue_Value() {}

func (*ParameterMetaValue_Floating) isParameterMetaValue_Value() {}

type ParameterOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ParameterOption) Reset() {
	*x = ParameterOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ibeam_core_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterOption) ProtoMessage() {}

func (x *ParameterOption) ProtoReflect() protoreflect.Message {
	mi := &file_ibeam_core_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterOption.ProtoReflect.Descriptor instead.
func (*ParameterOption) Descriptor() ([]byte, []int) {
	return file_ibeam_core_proto_rawDescGZIP(), []int{20}
}

func (x *ParameterOption) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ParameterOption) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var file_ibeam_core_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FileOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         5000,
		Name:          "ibeam_core.ibeam_version",
		Tag:           "bytes,5000,opt,name=ibeam_version",
		Filename:      "ibeam-core.proto",
	},
}

// Extension fields to descriptorpb.FileOptions.
var (
	// optional string ibeam_version = 5000;
	E_IbeamVersion = &file_ibeam_core_proto_extTypes[0]
)

var File_ibeam_core_proto protoreflect.FileDescriptor

var file_ibeam_core_proto_rawDesc = []byte{
	0x0a, 0x10, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x20,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x96, 0x02, 0x0a, 0x08, 0x43, 0x6f,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x62,
	0x65, 0x61, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x42,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x1d, 0x0a, 0x09, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x22, 0x42, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x49, 0x44, 0x22, 0x47, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x62, 0x65, 0x61,
	0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x1c,
	0x0a, 0x08, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x51, 0x0a, 0x09,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x43, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x35, 0x0a,
	0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x22, 0x49, 0x0a, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22,
	0x45, 0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x73, 0x12, 0x2f, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x44, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x43, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x62, 0x65, 0x61,
	0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xdd, 0x04, 0x0a,
	0x0e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x69, 0x73, 0x41, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x41, 0x73, 0x73, 0x75, 0x6d,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x22, 0x0a,
	0x0b, 0x69, 0x6e, 0x63, 0x44, 0x65, 0x63, 0x53, 0x74, 0x65, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x44, 0x65, 0x63, 0x53, 0x74, 0x65, 0x70,
	0x73, 0x12, 0x1c, 0x0a, 0x08, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x08, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x12, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03,
	0x73, 0x74, 0x72, 0x12, 0x26, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d,
	0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x18, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x38,
	0x0a, 0x0a, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x61,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69,
	0x62, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x61, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x1a, 0x5d, 0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d,
	0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x43, 0x0a, 0x0a,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x62,
	0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x46, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x43, 0x0a, 0x11, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x44, 0x73, 0x12, 0x2e,
	0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x62,
	0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x44, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x90,
	0x0a, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x3b, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69,
	0x62, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a,
	0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x69, 0x73, 0x53, 0x70, 0x65, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x66, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0d, 0x66, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x4d, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x71, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x69, 0x6e,
	0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x71, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x33, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x69,
	0x62, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x36, 0x0a, 0x0a, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69,
	0x62, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x30, 0x0a, 0x13, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x12, 0x3e, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d,
	0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x5a, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x62,
	0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d,
	0x65, 0x74, 0x61, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34,
	0x0a, 0x15, 0x69, 0x6e, 0x63, 0x44, 0x65, 0x63, 0x53, 0x74, 0x65, 0x70, 0x73, 0x55, 0x70, 0x70,
	0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x69,
	0x6e, 0x63, 0x44, 0x65, 0x63, 0x53, 0x74, 0x65, 0x70, 0x73, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x69, 0x6e, 0x63, 0x44, 0x65, 0x63, 0x53, 0x74,
	0x65, 0x70, 0x73, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x15, 0x69, 0x6e, 0x63, 0x44, 0x65, 0x63, 0x53, 0x74, 0x65, 0x70, 0x73,
	0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x68, 0x69, 0x6c, 0x65, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x68, 0x69,
	0x6c, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x1a, 0x61,
	0x0a, 0x14, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x49, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x5d, 0x0a, 0x0f,
	0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x85, 0x01, 0x0a, 0x12,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x1c, 0x0a, 0x08,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00,
	0x52, 0x08, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x35, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x3d, 0x0a, 0x0e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x10, 0x02,
	0x12, 0x07, 0x0a, 0x03, 0x53, 0x64, 0x69, 0x10, 0x03, 0x2a, 0x53, 0x0a, 0x11, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f,
	0x0a, 0x0b, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x4d, 0x65, 0x74, 0x61, 0x53, 0x74, 0x72, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c,
	0x4d, 0x65, 0x74, 0x61, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x2a, 0x16,
	0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x10, 0x00, 0x2a, 0x54, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x6f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4f,
	0x70, 0x74, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x10, 0x04,
	0x12, 0x0a, 0x0a, 0x06, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x10, 0x05, 0x2a, 0x5f, 0x0a, 0x0d,
	0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x15, 0x0a,
	0x11, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x4e, 0x6f, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x03, 0x2a, 0x71, 0x0a,
	0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x0d, 0x0a,
	0x09, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x6f, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x6e, 0x65, 0x73,
	0x68, 0x6f, 0x74, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x64, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x10, 0x05,
	0x2a, 0xc4, 0x01, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x46, 0x4c, 0x4f, 0x41, 0x54, 0x5f, 0x31, 0x44, 0x45, 0x5a, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x32, 0x44, 0x45,
	0x5a, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x5f, 0x33, 0x44, 0x45, 0x5a, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d,
	0x0a, 0x09, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x62, 0x10, 0x05, 0x12, 0x10, 0x0a,
	0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x73, 0x74, 0x6f, 0x70, 0x10, 0x06, 0x12,
	0x13, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4b,
	0x65, 0x6c, 0x76, 0x69, 0x6e, 0x10, 0x08, 0x2a, 0x71, 0x0a, 0x0b, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x50, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x61, 0x6e, 0x10, 0x03, 0x12,
	0x08, 0x0a, 0x04, 0x54, 0x69, 0x6c, 0x74, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x61, 0x6c,
	0x6c, 0x79, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x10, 0x06,
	0x12, 0x08, 0x0a, 0x04, 0x49, 0x72, 0x69, 0x73, 0x10, 0x07, 0x2a, 0xa9, 0x01, 0x0a, 0x0e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x0b, 0x0a,
	0x07, 0x4e, 0x6f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x49, 0x44, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4d,
	0x69, 0x6e, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x12, 0x10, 0x0a,
	0x0c, 0x4d, 0x61, 0x78, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x04, 0x12,
	0x0f, 0x0a, 0x0b, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x10, 0x05,
	0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x73, 0x10, 0x06, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x74, 0x65, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x56, 0x69, 0x6f, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x61, 0x73, 0x4e, 0x6f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x10, 0x08, 0x32, 0xcd, 0x03, 0x0a, 0x09, 0x49, 0x62, 0x65, 0x61, 0x6d,
	0x43, 0x6f, 0x72, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x11, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x2e,
	0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x44, 0x73, 0x1a, 0x17, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x3c, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x2e,
	0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x49, 0x44, 0x73, 0x1a, 0x16, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x3d, 0x0a, 0x03, 0x47,
	0x65, 0x74, 0x12, 0x1e, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x73, 0x1a, 0x16, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x52, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x1d, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x44, 0x73,
	0x1a, 0x1c, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x30,
	0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x11, 0x2e,
	0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x44, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x1e, 0x2e,
	0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x44, 0x73, 0x1a, 0x15, 0x2e,
	0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x30, 0x01, 0x3a, 0x42, 0x0a, 0x0d, 0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x88, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x62,
	0x65, 0x61, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x18, 0x5a, 0x0c, 0x2e, 0x3b,
	0x69, 0x62, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0xc2, 0xb8, 0x02, 0x06, 0x76, 0x30,
	0x2e, 0x32, 0x2e, 0x34, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ibeam_core_proto_rawDescOnce sync.Once
	file_ibeam_core_proto_rawDescData = file_ibeam_core_proto_rawDesc
)

func file_ibeam_core_proto_rawDescGZIP() []byte {
	file_ibeam_core_proto_rawDescOnce.Do(func() {
		file_ibeam_core_proto_rawDescData = protoimpl.X.CompressGZIP(file_ibeam_core_proto_rawDescData)
	})
	return file_ibeam_core_proto_rawDescData
}

var file_ibeam_core_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_ibeam_core_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_ibeam_core_proto_goTypes = []interface{}{
	(ConnectionType)(0),              // 0: ibeam_core.ConnectionType
	(ParameterMetaType)(0),           // 1: ibeam_core.ParameterMetaType
	(Command)(0),                     // 2: ibeam_core.Command
	(ValueType)(0),                   // 3: ibeam_core.ValueType
	(FeedbackStyle)(0),               // 4: ibeam_core.FeedbackStyle
	(ControlStyle)(0),                // 5: ibeam_core.ControlStyle
	(DisplayStyle)(0),                // 6: ibeam_core.DisplayStyle
	(GenericType)(0),                 // 7: ibeam_core.GenericType
	(ParameterError)(0),              // 8: ibeam_core.ParameterError
	(*Empty)(nil),                    // 9: ibeam_core.Empty
	(*CoreInfo)(nil),                 // 10: ibeam_core.CoreInfo
	(*DeviceIDs)(nil),                // 11: ibeam_core.DeviceIDs
	(*DeviceInfo)(nil),               // 12: ibeam_core.DeviceInfo
	(*DeviceInfos)(nil),              // 13: ibeam_core.DeviceInfos
	(*ModelIDs)(nil),                 // 14: ibeam_core.ModelIDs
	(*ModelInfo)(nil),                // 15: ibeam_core.ModelInfo
	(*ModelInfos)(nil),               // 16: ibeam_core.ModelInfos
	(*DeviceParameterID)(nil),        // 17: ibeam_core.DeviceParameterID
	(*DeviceParameterIDs)(nil),       // 18: ibeam_core.DeviceParameterIDs
	(*Parameter)(nil),                // 19: ibeam_core.Parameter
	(*Parameters)(nil),               // 20: ibeam_core.Parameters
	(*ParameterValue)(nil),           // 21: ibeam_core.ParameterValue
	(*OptionList)(nil),               // 22: ibeam_core.OptionList
	(*ModelParameterID)(nil),         // 23: ibeam_core.ModelParameterID
	(*ModelParameterIDs)(nil),        // 24: ibeam_core.ModelParameterIDs
	(*ParameterDetail)(nil),          // 25: ibeam_core.ParameterDetail
	(*ParameterDetails)(nil),         // 26: ibeam_core.ParameterDetails
	(*DimensionDetail)(nil),          // 27: ibeam_core.DimensionDetail
	(*ParameterMetaValue)(nil),       // 28: ibeam_core.ParameterMetaValue
	(*ParameterOption)(nil),          // 29: ibeam_core.ParameterOption
	nil,                              // 30: ibeam_core.ParameterValue.MetaValuesEntry
	nil,                              // 31: ibeam_core.ParameterDetail.MetaDescriptionEntry
	(*descriptorpb.FileOptions)(nil), // 32: google.protobuf.FileOptions
}
var file_ibeam_core_proto_depIdxs = []int32{
	0,  // 0: ibeam_core.CoreInfo.connectionType:type_name -> ibeam_core.ConnectionType
	12, // 1: ibeam_core.DeviceInfos.deviceInfos:type_name -> ibeam_core.DeviceInfo
	15, // 2: ibeam_core.ModelInfos.modelInfos:type_name -> ibeam_core.ModelInfo
	17, // 3: ibeam_core.DeviceParameterIDs.ids:type_name -> ibeam_core.DeviceParameterID
	17, // 4: ibeam_core.Parameter.id:type_name -> ibeam_core.DeviceParameterID
	8,  // 5: ibeam_core.Parameter.error:type_name -> ibeam_core.ParameterError
	21, // 6: ibeam_core.Parameter.value:type_name -> ibeam_core.ParameterValue
	19, // 7: ibeam_core.Parameters.parameters:type_name -> ibeam_core.Parameter
	2,  // 8: ibeam_core.ParameterValue.cmd:type_name -> ibeam_core.Command
	22, // 9: ibeam_core.ParameterValue.optionList:type_name -> ibeam_core.OptionList
	30, // 10: ibeam_core.ParameterValue.metaValues:type_name -> ibeam_core.ParameterValue.MetaValuesEntry
	29, // 11: ibeam_core.OptionList.options:type_name -> ibeam_core.ParameterOption
	23, // 12: ibeam_core.ModelParameterIDs.ids:type_name -> ibeam_core.ModelParameterID
	23, // 13: ibeam_core.ParameterDetail.id:type_name -> ibeam_core.ModelParameterID
	27, // 14: ibeam_core.ParameterDetail.dimensions:type_name -> ibeam_core.DimensionDetail
	7,  // 15: ibeam_core.ParameterDetail.genericType:type_name -> ibeam_core.GenericType
	5,  // 16: ibeam_core.ParameterDetail.controlStyle:type_name -> ibeam_core.ControlStyle
	4,  // 17: ibeam_core.ParameterDetail.feedbackStyle:type_name -> ibeam_core.FeedbackStyle
	3,  // 18: ibeam_core.ParameterDetail.valueType:type_name -> ibeam_core.ValueType
	6,  // 19: ibeam_core.ParameterDetail.displayStyle:type_name -> ibeam_core.DisplayStyle
	22, // 20: ibeam_core.ParameterDetail.optionList:type_name -> ibeam_core.OptionList
	21, // 21: ibeam_core.ParameterDetail.defaultValue:type_name -> ibeam_core.ParameterValue
	31, // 22: ibeam_core.ParameterDetail.metaDescription:type_name -> ibeam_core.ParameterDetail.MetaDescriptionEntry
	25, // 23: ibeam_core.ParameterDetails.details:type_name -> ibeam_core.ParameterDetail
	28, // 24: ibeam_core.ParameterValue.MetaValuesEntry.value:type_name -> ibeam_core.ParameterMetaValue
	1,  // 25: ibeam_core.ParameterDetail.MetaDescriptionEntry.value:type_name -> ibeam_core.ParameterMetaType
	32, // 26: ibeam_core.ibeam_version:extendee -> google.protobuf.FileOptions
	9,  // 27: ibeam_core.IbeamCore.GetCoreInfo:input_type -> ibeam_core.Empty
	11, // 28: ibeam_core.IbeamCore.GetDeviceInfo:input_type -> ibeam_core.DeviceIDs
	14, // 29: ibeam_core.IbeamCore.GetModelInfo:input_type -> ibeam_core.ModelIDs
	18, // 30: ibeam_core.IbeamCore.Get:input_type -> ibeam_core.DeviceParameterIDs
	24, // 31: ibeam_core.IbeamCore.GetParameterDetails:input_type -> ibeam_core.ModelParameterIDs
	20, // 32: ibeam_core.IbeamCore.Set:input_type -> ibeam_core.Parameters
	18, // 33: ibeam_core.IbeamCore.Subscribe:input_type -> ibeam_core.DeviceParameterIDs
	10, // 34: ibeam_core.IbeamCore.GetCoreInfo:output_type -> ibeam_core.CoreInfo
	13, // 35: ibeam_core.IbeamCore.GetDeviceInfo:output_type -> ibeam_core.DeviceInfos
	16, // 36: ibeam_core.IbeamCore.GetModelInfo:output_type -> ibeam_core.ModelInfos
	20, // 37: ibeam_core.IbeamCore.Get:output_type -> ibeam_core.Parameters
	26, // 38: ibeam_core.IbeamCore.GetParameterDetails:output_type -> ibeam_core.ParameterDetails
	9,  // 39: ibeam_core.IbeamCore.Set:output_type -> ibeam_core.Empty
	19, // 40: ibeam_core.IbeamCore.Subscribe:output_type -> ibeam_core.Parameter
	34, // [34:41] is the sub-list for method output_type
	27, // [27:34] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	26, // [26:27] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_ibeam_core_proto_init() }
func file_ibeam_core_proto_init() {
	if File_ibeam_core_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ibeam_core_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_core_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoreInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_core_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceIDs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_core_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_core_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_core_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelIDs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_core_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_core_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_core_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceParameterID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_core_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceParameterIDs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_core_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Parameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_core_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_core_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_core_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_core_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelParameterID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_core_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelParameterIDs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_core_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_core_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_core_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DimensionDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_core_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterMetaValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ibeam_core_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ibeam_core_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*ParameterValue_Integer)(nil),
		(*ParameterValue_IncDecSteps)(nil),
		(*ParameterValue_Floating)(nil),
		(*ParameterValue_Str)(nil),
		(*ParameterValue_CurrentOption)(nil),
		(*ParameterValue_Cmd)(nil),
		(*ParameterValue_Binary)(nil),
		(*ParameterValue_OptionList)(nil),
	}
	file_ibeam_core_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*ParameterMetaValue_Integer)(nil),
		(*ParameterMetaValue_Binary)(nil),
		(*ParameterMetaValue_Str)(nil),
		(*ParameterMetaValue_Floating)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ibeam_core_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   23,
			NumExtensions: 1,
			NumServices:   1,
		},
		GoTypes:           file_ibeam_core_proto_goTypes,
		DependencyIndexes: file_ibeam_core_proto_depIdxs,
		EnumInfos:         file_ibeam_core_proto_enumTypes,
		MessageInfos:      file_ibeam_core_proto_msgTypes,
		ExtensionInfos:    file_ibeam_core_proto_extTypes,
	}.Build()
	File_ibeam_core_proto = out.File
	file_ibeam_core_proto_rawDesc = nil
	file_ibeam_core_proto_goTypes = nil
	file_ibeam_core_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IbeamCoreClient is the client API for IbeamCore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IbeamCoreClient interface {
	// Returns all basic information about the Core.
	GetCoreInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CoreInfo, error)
	// Returns all information about the Device of the given DeviceID.
	// If you specify no ID, you get the DeviceInfos of all Devices.
	GetDeviceInfo(ctx context.Context, in *DeviceIDs, opts ...grpc.CallOption) (*DeviceInfos, error)
	// Returns all information about the Model of the given ModelID.
	// If you specify no ID, you get the ModelInfos of all Models.
	GetModelInfo(ctx context.Context, in *ModelIDs, opts ...grpc.CallOption) (*ModelInfos, error)
	// Returns all Parameters, with the specified DeviceParameterIDs.
	// This Parameters include the actual ParameterValue, which gives Information
	// about the availability and shows if the Parameter is assumed.
	// If you set no ParameterID, you get all Parameters for a given Device.
	Get(ctx context.Context, in *DeviceParameterIDs, opts ...grpc.CallOption) (*Parameters, error)
	// Returns all ParameterDetails of the given ModelParameterID.
	// The Details include all basic information about a Parameter,
	// that descibe also how you cann controll the Parameter.
	// If you set no ParameterID, you get all Parameters for a given Model.
	GetParameterDetails(ctx context.Context, in *ModelParameterIDs, opts ...grpc.CallOption) (*ParameterDetails, error)
	// With this funciton you can set a Value of a Parameter.
	// This function provides no Error. This will be send over the Subscribe
	// Stream.
	Set(ctx context.Context, in *Parameters, opts ...grpc.CallOption) (*Empty, error)
	// No id -> subscribe to everything
	// On subscribe all current values should be sent back!
	Subscribe(ctx context.Context, in *DeviceParameterIDs, opts ...grpc.CallOption) (IbeamCore_SubscribeClient, error)
}

type ibeamCoreClient struct {
	cc grpc.ClientConnInterface
}

func NewIbeamCoreClient(cc grpc.ClientConnInterface) IbeamCoreClient {
	return &ibeamCoreClient{cc}
}

func (c *ibeamCoreClient) GetCoreInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CoreInfo, error) {
	out := new(CoreInfo)
	err := c.cc.Invoke(ctx, "/ibeam_core.IbeamCore/GetCoreInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ibeamCoreClient) GetDeviceInfo(ctx context.Context, in *DeviceIDs, opts ...grpc.CallOption) (*DeviceInfos, error) {
	out := new(DeviceInfos)
	err := c.cc.Invoke(ctx, "/ibeam_core.IbeamCore/GetDeviceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ibeamCoreClient) GetModelInfo(ctx context.Context, in *ModelIDs, opts ...grpc.CallOption) (*ModelInfos, error) {
	out := new(ModelInfos)
	err := c.cc.Invoke(ctx, "/ibeam_core.IbeamCore/GetModelInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ibeamCoreClient) Get(ctx context.Context, in *DeviceParameterIDs, opts ...grpc.CallOption) (*Parameters, error) {
	out := new(Parameters)
	err := c.cc.Invoke(ctx, "/ibeam_core.IbeamCore/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ibeamCoreClient) GetParameterDetails(ctx context.Context, in *ModelParameterIDs, opts ...grpc.CallOption) (*ParameterDetails, error) {
	out := new(ParameterDetails)
	err := c.cc.Invoke(ctx, "/ibeam_core.IbeamCore/GetParameterDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ibeamCoreClient) Set(ctx context.Context, in *Parameters, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ibeam_core.IbeamCore/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ibeamCoreClient) Subscribe(ctx context.Context, in *DeviceParameterIDs, opts ...grpc.CallOption) (IbeamCore_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_IbeamCore_serviceDesc.Streams[0], "/ibeam_core.IbeamCore/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &ibeamCoreSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IbeamCore_SubscribeClient interface {
	Recv() (*Parameter, error)
	grpc.ClientStream
}

type ibeamCoreSubscribeClient struct {
	grpc.ClientStream
}

func (x *ibeamCoreSubscribeClient) Recv() (*Parameter, error) {
	m := new(Parameter)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IbeamCoreServer is the server API for IbeamCore service.
type IbeamCoreServer interface {
	// Returns all basic information about the Core.
	GetCoreInfo(context.Context, *Empty) (*CoreInfo, error)
	// Returns all information about the Device of the given DeviceID.
	// If you specify no ID, you get the DeviceInfos of all Devices.
	GetDeviceInfo(context.Context, *DeviceIDs) (*DeviceInfos, error)
	// Returns all information about the Model of the given ModelID.
	// If you specify no ID, you get the ModelInfos of all Models.
	GetModelInfo(context.Context, *ModelIDs) (*ModelInfos, error)
	// Returns all Parameters, with the specified DeviceParameterIDs.
	// This Parameters include the actual ParameterValue, which gives Information
	// about the availability and shows if the Parameter is assumed.
	// If you set no ParameterID, you get all Parameters for a given Device.
	Get(context.Context, *DeviceParameterIDs) (*Parameters, error)
	// Returns all ParameterDetails of the given ModelParameterID.
	// The Details include all basic information about a Parameter,
	// that descibe also how you cann controll the Parameter.
	// If you set no ParameterID, you get all Parameters for a given Model.
	GetParameterDetails(context.Context, *ModelParameterIDs) (*ParameterDetails, error)
	// With this funciton you can set a Value of a Parameter.
	// This function provides no Error. This will be send over the Subscribe
	// Stream.
	Set(context.Context, *Parameters) (*Empty, error)
	// No id -> subscribe to everything
	// On subscribe all current values should be sent back!
	Subscribe(*DeviceParameterIDs, IbeamCore_SubscribeServer) error
}

// UnimplementedIbeamCoreServer can be embedded to have forward compatible implementations.
type UnimplementedIbeamCoreServer struct {
}

func (*UnimplementedIbeamCoreServer) GetCoreInfo(context.Context, *Empty) (*CoreInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoreInfo not implemented")
}
func (*UnimplementedIbeamCoreServer) GetDeviceInfo(context.Context, *DeviceIDs) (*DeviceInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceInfo not implemented")
}
func (*UnimplementedIbeamCoreServer) GetModelInfo(context.Context, *ModelIDs) (*ModelInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelInfo not implemented")
}
func (*UnimplementedIbeamCoreServer) Get(context.Context, *DeviceParameterIDs) (*Parameters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedIbeamCoreServer) GetParameterDetails(context.Context, *ModelParameterIDs) (*ParameterDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParameterDetails not implemented")
}
func (*UnimplementedIbeamCoreServer) Set(context.Context, *Parameters) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (*UnimplementedIbeamCoreServer) Subscribe(*DeviceParameterIDs, IbeamCore_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterIbeamCoreServer(s *grpc.Server, srv IbeamCoreServer) {
	s.RegisterService(&_IbeamCore_serviceDesc, srv)
}

func _IbeamCore_GetCoreInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IbeamCoreServer).GetCoreInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibeam_core.IbeamCore/GetCoreInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IbeamCoreServer).GetCoreInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IbeamCore_GetDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IbeamCoreServer).GetDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibeam_core.IbeamCore/GetDeviceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IbeamCoreServer).GetDeviceInfo(ctx, req.(*DeviceIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _IbeamCore_GetModelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IbeamCoreServer).GetModelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibeam_core.IbeamCore/GetModelInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IbeamCoreServer).GetModelInfo(ctx, req.(*ModelIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _IbeamCore_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceParameterIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IbeamCoreServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibeam_core.IbeamCore/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IbeamCoreServer).Get(ctx, req.(*DeviceParameterIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _IbeamCore_GetParameterDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelParameterIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IbeamCoreServer).GetParameterDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibeam_core.IbeamCore/GetParameterDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IbeamCoreServer).GetParameterDetails(ctx, req.(*ModelParameterIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _IbeamCore_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IbeamCoreServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ibeam_core.IbeamCore/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IbeamCoreServer).Set(ctx, req.(*Parameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _IbeamCore_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceParameterIDs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IbeamCoreServer).Subscribe(m, &ibeamCoreSubscribeServer{stream})
}

type IbeamCore_SubscribeServer interface {
	Send(*Parameter) error
	grpc.ServerStream
}

type ibeamCoreSubscribeServer struct {
	grpc.ServerStream
}

func (x *ibeamCoreSubscribeServer) Send(m *Parameter) error {
	return x.ServerStream.SendMsg(m)
}

var _IbeamCore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ibeam_core.IbeamCore",
	HandlerType: (*IbeamCoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCoreInfo",
			Handler:    _IbeamCore_GetCoreInfo_Handler,
		},
		{
			MethodName: "GetDeviceInfo",
			Handler:    _IbeamCore_GetDeviceInfo_Handler,
		},
		{
			MethodName: "GetModelInfo",
			Handler:    _IbeamCore_GetModelInfo_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _IbeamCore_Get_Handler,
		},
		{
			MethodName: "GetParameterDetails",
			Handler:    _IbeamCore_GetParameterDetails_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _IbeamCore_Set_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _IbeamCore_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ibeam-core.proto",
}
